
//! Autogenerated weights for `pallet_sugondat_blobs`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-27, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `gab`, CPU: `Intel(R) Core(TM) i5-8350U CPU @ 1.70GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// ./target/release/sugondat-node
// benchmark
// pallet
// --dev
// --pallet
// pallet_sugondat_blobs
// --extrinsic
// *
// --steps
// 2
// --repeat
// 1
// --template
// sugondat-chain/pallets/blobs/src/frame-weight-template.hbs
// --output
// sugondat-chain/pallets/blobs/src/weights_append.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_sugondat_blobs`.
pub trait WeightInfo {
	fn submit_blob(x: u32, y: u32, ) -> Weight;
	fn on_finalize(x: u32, ) -> Weight;
}

/// Weights for `pallet_sugondat_blobs` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Blobs::TotalBlobs` (r:1 w:1)
	/// Proof: `Blobs::TotalBlobs` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Blobs::TotalBlobsSize` (r:1 w:1)
	/// Proof: `Blobs::TotalBlobsSize` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Blobs::BlobList` (r:1 w:1)
	/// Proof: `Blobs::BlobList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 102399]`.
	/// The range of component `y` is `[1, 102400]`.
	fn submit_blob(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3 + x * (72 ±0)`
		//  Estimated: `1489 + x * (72 ±0)`
		// Minimum execution time: 660_640_000 picoseconds.
		Weight::from_parts(660_640_000, 1489)
			// Standard Error: 45_818
			.saturating_add(Weight::from_parts(182_501, 0).saturating_mul(x.into()))
			// Standard Error: 45_817
			.saturating_add(Weight::from_parts(19_914, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 72).saturating_mul(x.into()))
	}
	/// Storage: `Blobs::BlobList` (r:1 w:0)
	/// Proof: `Blobs::BlobList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:1)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 102400]`.
	fn on_finalize(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4 + x * (72 ±0)`
		//  Estimated: `7374371`
		// Minimum execution time: 13_812_000 picoseconds.
		Weight::from_parts(457_971_510_000, 7374371)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Blobs::TotalBlobs` (r:1 w:1)
	/// Proof: `Blobs::TotalBlobs` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Blobs::TotalBlobsSize` (r:1 w:1)
	/// Proof: `Blobs::TotalBlobsSize` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Blobs::BlobList` (r:1 w:1)
	/// Proof: `Blobs::BlobList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 102399]`.
	/// The range of component `y` is `[1, 102400]`.
	fn submit_blob(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3 + x * (72 ±0)`
		//  Estimated: `1489 + x * (72 ±0)`
		// Minimum execution time: 660_640_000 picoseconds.
		Weight::from_parts(660_640_000, 1489)
			// Standard Error: 45_818
			.saturating_add(Weight::from_parts(182_501, 0).saturating_mul(x.into()))
			// Standard Error: 45_817
			.saturating_add(Weight::from_parts(19_914, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 72).saturating_mul(x.into()))
	}
	/// Storage: `Blobs::BlobList` (r:1 w:0)
	/// Proof: `Blobs::BlobList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:1)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 102400]`.
	fn on_finalize(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4 + x * (72 ±0)`
		//  Estimated: `7374371`
		// Minimum execution time: 13_812_000 picoseconds.
		Weight::from_parts(457_971_510_000, 7374371)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
